// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.4
//   protoc               v5.28.2
// source: common-proto/sample/v1/sample.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "sample.v1";

export interface GetHelloRequest {
}

export interface GetHelloResponse {
  message: string;
}

export interface AddNameRequest {
  name: string;
}

export interface AddNameResponse {
  message: string;
}

export interface PrintNamesRequest {
  size: number;
  nameFilter: string;
}

export interface PrintNamesResponse {
  names: string[];
}

export interface ProduceEventRequest {
  message: string;
}

export interface ProduceEventResponse {
  message: string;
}

export interface UploadFileRequest {
  fileName: string;
}

export interface UploadFileResponse {
  message: string;
}

export const SAMPLE_V1_PACKAGE_NAME = "sample.v1";

export interface SampleServiceClient {
  getHello(request: GetHelloRequest, metadata?: Metadata): Observable<GetHelloResponse>;

  addName(request: AddNameRequest, metadata?: Metadata): Observable<AddNameResponse>;

  printNames(request: PrintNamesRequest, metadata?: Metadata): Observable<PrintNamesResponse>;

  produceEvent(request: ProduceEventRequest, metadata?: Metadata): Observable<ProduceEventResponse>;

  uploadFile(request: Observable<UploadFileRequest>, metadata?: Metadata): Observable<UploadFileResponse>;
}

export interface SampleServiceController {
  getHello(
    request: GetHelloRequest,
    metadata?: Metadata,
  ): Promise<GetHelloResponse> | Observable<GetHelloResponse> | GetHelloResponse;

  addName(
    request: AddNameRequest,
    metadata?: Metadata,
  ): Promise<AddNameResponse> | Observable<AddNameResponse> | AddNameResponse;

  printNames(
    request: PrintNamesRequest,
    metadata?: Metadata,
  ): Promise<PrintNamesResponse> | Observable<PrintNamesResponse> | PrintNamesResponse;

  produceEvent(
    request: ProduceEventRequest,
    metadata?: Metadata,
  ): Promise<ProduceEventResponse> | Observable<ProduceEventResponse> | ProduceEventResponse;

  uploadFile(
    request: Observable<UploadFileRequest>,
    metadata?: Metadata,
  ): Promise<UploadFileResponse> | Observable<UploadFileResponse> | UploadFileResponse;
}

export function SampleServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getHello", "addName", "printNames", "produceEvent"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SampleService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["uploadFile"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SampleService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SAMPLE_SERVICE_NAME = "SampleService";
